name: 'Create nomad cluster'
description: 'Set up the nomad cluster used to test nf-nomad against'
inputs:
  CLIENT_ID:
    description: 'The Azure Active Directory (AAD) client ID for authentication.'
    required: true
  SUBSCRIPTION_ID:
    description: 'The Azure subscription ID where the resources will be managed.'
    required: true
  TENANT_ID:
    description: 'The Azure Active Directory (AAD) tenant ID for authentication.'
    required: true
  CLIENT_SECRET:
    description: 'The client secret associated with the Azure Active Directory (AAD) client ID.'
    required: true
  RESOURCE_GROUP_NAME:
    description: "The name of the resource group."
    required: true
  STORAGE_ACCOUNT_NAME:
    description: "The name of the storage account."
    required: true
  IMAGE_NAME:
    description: "The Azure image to use for the server and client machines."
    required: true
  NOMAD_ACL_ENABLED:
    description: "Enable nomad ACL."
    required: true
  CONSUL_ACL_ENABLED:
    description: "Enable consul ACL."
    required: true

runs:
  using: "composite"
  steps:
    - name: Checkout the code
      uses: actions/checkout@v3
    
    - name: Setup Node
      uses: actions/setup-node@v2
      with:
        node-version: '20'

    - name: Setup terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: 1.9.8
        terraform_wrapper: false

    - name: Initialize terraforms
      shell: bash
      working-directory: ./terraform/Infrastructure
      run: terraform init -reconfigure -lock=false
      env:
        ARM_CLIENT_ID: ${{ inputs.CLIENT_ID }}
        ARM_SUBSCRIPTION_ID: ${{ inputs.SUBSCRIPTION_ID }}
        ARM_TENANT_ID: ${{ inputs.TENANT_ID }}
        ARM_CLIENT_SECRET: ${{ inputs.CLIENT_SECRET }}

    - name: Terraform plan
      shell: bash
      working-directory: ./terraform/Infrastructure
      run: terraform plan -lock=false
      env:
        ARM_CLIENT_ID: ${{ inputs.CLIENT_ID }}
        ARM_SUBSCRIPTION_ID: ${{ inputs.SUBSCRIPTION_ID }}
        ARM_TENANT_ID: ${{ inputs.TENANT_ID }}
        ARM_CLIENT_SECRET: ${{ inputs.CLIENT_SECRET }}
        TF_VAR_client_id: ${{ inputs.CLIENT_ID }}
        TF_VAR_subscription_id: ${{ inputs.SUBSCRIPTION_ID }}
        TF_VAR_tenant_id: ${{ inputs.TENANT_ID }}
        TF_VAR_client_secret: ${{ inputs.CLIENT_SECRET }}
        TF_VAR_resource_group_name: ${{ inputs.RESOURCE_GROUP_NAME }}
        TF_VAR_storage_account_name: ${{ inputs.STORAGE_ACCOUNT_NAME }}
        TF_VAR_image_name: ${{ inputs.IMAGE_NAME }}
        TF_VAR_nomad_acl_enabled: ${{ inputs.NOMAD_ACL_ENABLED }}
        TF_VAR_consul_acl_enabled: ${{ inputs.CONSUL_ACL_ENABLED }}

    - name: Apply the changes made
      id: apply
      shell: bash
      working-directory: ./terraform/Infrastructure
      env:
        ARM_CLIENT_ID: ${{ inputs.CLIENT_ID }}
        ARM_SUBSCRIPTION_ID: ${{ inputs.SUBSCRIPTION_ID }}
        ARM_TENANT_ID: ${{ inputs.TENANT_ID }}
        ARM_CLIENT_SECRET: ${{ inputs.CLIENT_SECRET }}
        TF_VAR_client_id: ${{ inputs.CLIENT_ID }}
        TF_VAR_subscription_id: ${{ inputs.SUBSCRIPTION_ID }}
        TF_VAR_tenant_id: ${{ inputs.TENANT_ID }}
        TF_VAR_client_secret: ${{ inputs.CLIENT_SECRET }}
        TF_VAR_resource_group_name: ${{ inputs.RESOURCE_GROUP_NAME }}
        TF_VAR_storage_account_name: ${{ inputs.STORAGE_ACCOUNT_NAME }}
        TF_VAR_image_name: ${{ inputs.IMAGE_NAME }}
        TF_VAR_nomad_acl_enabled: ${{ inputs.NOMAD_ACL_ENABLED }}
        TF_VAR_consul_acl_enabled: ${{ inputs.CONSUL_ACL_ENABLED }}
      run: terraform apply --auto-approve -lock=false

    - name: Export terraform output
      id: tf-output
      shell: bash
      working-directory: ./terraform/Infrastructure
      env:
        ARM_CLIENT_ID: ${{ inputs.CLIENT_ID }}
        ARM_SUBSCRIPTION_ID: ${{ inputs.SUBSCRIPTION_ID }}
        ARM_TENANT_ID: ${{ inputs.TENANT_ID }}
        ARM_CLIENT_SECRET: ${{ inputs.CLIENT_SECRET }}
        TF_VAR_client_id: ${{ inputs.CLIENT_ID }}
        TF_VAR_subscription_id: ${{ inputs.SUBSCRIPTION_ID }}
        TF_VAR_tenant_id: ${{ inputs.TENANT_ID }}
        TF_VAR_client_secret: ${{ inputs.CLIENT_SECRET }}
        TF_VAR_resource_group_name: ${{ inputs.RESOURCE_GROUP_NAME }}
        TF_VAR_storage_account_name: ${{ inputs.STORAGE_ACCOUNT_NAME }}
        TF_VAR_image_name: ${{ inputs.IMAGE_NAME }}
        TF_VAR_nomad_acl_enabled: ${{ inputs.NOMAD_ACL_ENABLED }}
        TF_VAR_consul_acl_enabled: ${{ inputs.CONSUL_ACL_ENABLED }}
      run: |
        echo "nomad_address=$(terraform output -raw nomad_address)" >> "$GITHUB_OUTPUT"
        echo "consul_bootstrap_token_secret=$(terraform output -raw consul_bootstrap_token_secret)" >> "$GITHUB_OUTPUT"
        echo "consul_address=$(terraform output -raw consul_address)" >> "$GITHUB_OUTPUT"
        echo "job_filesystem_name=$(terraform output -raw job_filesystem_name)" >> "$GITHUB_OUTPUT"

    - name: Fetch nomad tokens
      shell: bash
      run: |
        curl -sS --header "X-Consul-Token: ${{ steps.tf-output.outputs.consul_bootstrap_token_secret }}" ${{ steps.tf-output.outputs.consul_address}}/v1/kv/nomad/user_token


    # consul kv put -token-file=$CONSUL_BOOTSTRAP_TOKEN 'nomad/nextflow_token' "$(cat $NOMAD_NEXTFLOW_TOKEN)"
    # consul kv put -token-file=$CONSUL_BOOTSTRAP_TOKEN 'nomad/bootstrap_token' "$(cat $NOMAD_BOOTSTRAP_TOKEN)"

outputs:
  nomad_address:
    description: "Nomad address with port"
    value: ${{ steps.tf-output.outputs.nomad_address }}